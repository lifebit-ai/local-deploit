####### Set core env variables for on-premises, local storage and execution ####################

# These variables are specific for the local on-premises setup and do not depend on the machine running it.
# By default you don't need to modify these variables for the system to work.

# Activate the on-premise mode.
ON_PREM=true

# Set the URL of the api-server. When using docker-compose, the name of the service defined in the docker-compose.yml
# file is mapped to its IP inside the docker network. As so, here we specify the name of the service instead of its
# IP address.
ON_PREM_API_SERVER_URL=api-server

# Api-server exposed port to the other services.
ON_PREM_API_SERVER_PORT=3002

# Location where all results will be deposited inside the container. In the docker-compose.yml file this location is
# mapped to a virtual volume (user_data) that is shared between all services that need to access this data.
ON_PREM_LOCAL_WORK_DIR=/home/deploit/data/.deploit

# Set location where pipelines will be located inside the containers.
# Final location will be ON_PREM_LOCAL_WORK_DIR/NEXTFLOW_PIPELINES_LOCAL_STORAGE
NEXTFLOW_PIPELINES_LOCAL_STORAGE=local_workflows_dir

ON_PREM_OFFLINE_MODE=false

# Set if job submission is made by SSH.
# Set to true if submiting jobs to the slurmctld service (cluster).
# Set to false if submitting jobs using the local mode.
ON_PREM_SSH_EXECUTION=false

# Location of the keys inside the api-server container to be used to access the slurmctld service.
ON_PREM_SSH_KEY=/keys/id_rsa

# Set the IP address of the machine receiving instructions to submit the nextflow job through SSH. In this setup the
# service is the slurmctld (slurm master). The service name is converted to its IP in the docker network when launching
# the services.
ON_PREM_SSH_HOST=slurmctld

ON_PREM_NEXTFLOW_EXECUTOR=local

# In the current setup only singularity is available.
ON_PREM_NEXTFLOW_CONTAINER_ENGINE=singularity

# The default user of the slurmctld is root (default in every docker container)
ON_PREM_SSH_USERNAME=root

# Location where the application will search for the local data.
# Mapped to /input_data inside the container. We can specify what to map to /input_data from the docker-compose command.
# Currently it is mapped to "/input_data" inside the container which is also mapped as a volume inside the
# docker-compose.yml file.
LIFEBIT_LOCAL_TOP_LVL_DATA_DIRS=HOME::/input_data
